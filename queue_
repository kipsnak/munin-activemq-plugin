#!/usr/bin/perl
# -*- perl -*-

=head1 NAME

Plugin to monitor queue activities in ActiveMQ

=head1 CONFIGURATION

No configuration

=head2 Warning and Critical Values

If defined, warning and/or critical lines will be used.

[queue_*]
    env.size_warning 25
    env.size_critical 50

=head2 ENVIRONMENT

This plugin needs to retrieve some datas from your ActiveMQ server,
So, You should define ActiveMQ parameters by changing  environment variables:

[queue_*]
	env.host	<ActiveMQ_@IP>
	env.port	<ActiveMQ_Port>
	env.type	<Monitored value 1> ... <Monitored value n>

You can also rename the "category" by the following:
	env.category <some name>

#here an example:
# [queue_my.message.queue]
# 	env.host	127.0.0.1
#	env.port	8161
#	env.type	('size', 'enqueueCount', 'dequeueCount', 'consumerCount')
#	env.category my_pretty_name


Note: You want to display multi-graph for the same Queue?
you can use the name of the plugin symlink:
[queue_first_*]
	# here my ENV

[queue_second_*]
	# here my ENV


=head1 AUTHORS

Author: Antelink (Othmane Erraoui)

=head1 LICENSE

Unknown license

=head1 MAGIC MARKERS

#%# family=auto
#%# capabilities=autoconf

=head1 VERSION

Ver 1.0

=cut


use strict;
use WWW::Mechanize;
use XML::Simple;
use lib $ENV{'MUNIN_LIBDIR'};
use Munin::Plugin;


my $HOST		= exists $ENV{host} ? $ENV{host} : 'localhost';
my $PORT		= exists $ENV{port} ? $ENV{port} : 8161;
my $CATEGORY	= exists $ENV{category} ? $ENV{category} : 'ActiveMQ-Queues';
my @DISPLAYED   = exists $ENV{type} ? split(/ /, $ENV{type}) : ('default');

my $URI			= "http://$HOST:$PORT/admin/xml/queues.jsp";


##
# Main
##

check_autoconf();

$0 =~ /queue_?.*?_(.+)*$/;
my $queue_name = $1;
defined($queue_name) || exit 2;

my @var_array = get_vars( $queue_name, $CATEGORY, @DISPLAYED);
check_config($URI, $queue_name, @var_array);
get_values($URI, $queue_name, @var_array);


##
# Subroutines
##

sub check_autoconf{
	if (exists $ARGV[0] and $ARGV[0] eq 'autoconf' ){
		if (! eval "require WWW::Mechanize" ){
			print "no (WWW::Mechanize not found)\n";
			exit 1;
		}
		if (! eval "require XML::Simple" ){
			print "no (XML::Simple not found)\n";
			exit 1;
		}
		print "yes\n";
		exit 0;
	}
}


# Build a variable according to specific environment
# This Variable contains all Munin specific fields
# Will be used to output Munin config
sub get_vars{
	my ($key, $cat, @array) = @_;
	my $size = @array;

	## Master: global variable, configure Munin graph
	push( my @ret, { master => {
					graph_title => "ActiveMQ queue: $key",
					graph_args => "--base 1000",
					graph_vlabel => 'Messages',
					graph_category => "$cat"
			     }}
		);

	if ( $size == 1 and @array[0] eq 'default'){
		
		## here default graph config
		push( @ret, { __DEFAULT__ => { info => "This is a default config" }});
		push( @ret, {size => {
						label => "Queue Size",
						type => "GAUGE",
						draw => "LINE2",
						info => "Size of the current queue"
					}});

	}
	else {
		foreach ( @array ){

			## Each field below matches a signle fields in the same graph
			## We can have multi-fields or signle one.
			## it depends on you choice (Environment configuration)
			if ($_ eq 'dequeueCount'){
				push( @ret, { dequeueCount => {
							label => "Message acked succefully",
							type => "GAUGE",
							draw => "LINE2",
							infra => "The number of messages that have been successfully (i.e., they have been acknowledged from the consumer) read off the queue over the lifetime of the queue."
						}});
			}
			elsif ( $_ eq 'enqueueCount' ){
				push( @ret , { 'enqueueCount' => {
							label => "Total Messages",
							type => "GAUGE",
							draw => 'LINE2',
							info => "The number of messages that have been written to the queue over the lifetime of the queue."
						}});
			}
			elsif ( $_ eq 'size' ){
				push( @ret, { size => {
							label => "Queue Size",
							type => "GAUGE",
							draw => "LINE2",
							info => "Size of the current queue"
						}});
			}
			elsif ( $_ eq 'consumerCount' ){
				push( @ret, { consumerCount => {
							label =>"Number of consomers",
							type => "GAUGE",
							draw => "LINE2",
							info => "The number of active consumers on the destination when the advisory message was sent."
						}});
			}
			#else{ # if any other and/or unkown string => do nothing!	}
		}
	}
	return @ret;
}

# Read a variable builded by "get_vars" and format the OUTPUT
# In order to tell Munin what it has to do.
sub check_config{
	my ($uri, $queue_name , @vars_array) = @_;
	if (exists $ARGV[0] and $ARGV[0] eq 'config' ){
		
		# The $tree is an XML in tree object
		# get the tree of values from activemq
		# queues
		#    \_ queue
		#       \_ <queue_name_1>
		#       |   \_ 'feed'
		#       |   |   \_ 'atom' = feed_value1
		#       |   |   |
		#       |   |   \_ 'rss' = feed_value2
		#       |   \_ 'stats'
		#       |       \_ consumerCount = value
		#       |       |
		#       |       \_ dequeueCount = value
		#       |       |
		#       |       \_ enqueueCount = value
		#       |       |
		#       |       \_ size = value
		#       \_ <queue_name_2>
		#       |   \_ 'feed'
		#       |   |   \_ 'atom' = feed_value1
		#       |   |   |
		#       |   |   \_ 'rss' = feed_value2
		#       |   \_ 'stats'
		#  .... etc
		my $tree = fetch($uri);

		# For our specific queue_name we retrieve subtree with values
		#       |   \_ 'stats'
		#       |       \_ consumerCount = value
		#       |       |
		#       |       \_ dequeueCount = value
		#       |       |
		#       |       \_ enqueueCount = value
		my @values_hash = $tree->{queues}->{queue}->{$queue_name}->{stats};


		my $graph_order =  "graph_order ";
		my $buf = "";
		foreach (@vars_array){
			foreach my $key ( keys %{$_} ){
				if( $key eq 'master' ){
					 foreach my $item (keys $_->{$key} ){
						print "$item $_->{$key}->{$item} \n";
					 }
				}

				# As this point we display Global Munin graph config (Master)
				# it looks like:
				#     graph_title ActiveMQ queue: antepedia.online.waitQueue 
				#     graph_vlabel Messages 
				#     graph_category ActiveMQ-Queues 
				#     graph_args --base 1000
				else{
					my $warn;
					my $crit;
					$graph_order .= "$key ";
					foreach my $item (keys $_->{$key}){
						 $buf .= "$key.$item $_->{$key}->{$item}\n";
					}
					# add warning/critical thresholds for $key
					($warn, $crit) = get_thresholds ($key);
					$buf .= "$key.warning $warn\n" if defined $warn;
					$buf .= "$key.critical $crit\n" if defined $crit;
				}
			}
		}
		# Now we display the fields config
		# Looks like:
		#	 size.info Size of the current queue
		#	 size.draw LINE2
		#	 size.type GAUGE
		#	 size.label Queue Size
		print "$graph_order\n";
		print $buf;
		exit 0;
	}
}

# Gives Munin the values of the fields defined in "check_config"
sub get_values{
	my ($uri,$queue_name, @vars_array) = @_;
	my $tree = fetch( $uri );
	
	foreach my $hash (values @vars_array){
		foreach my $key ( keys $hash ){
			if ( $key ne 'master' ){
				my $value = $tree->{queues}->{queue}->{$queue_name}->{stats}->{$key};
				if( $value eq "" ){ $value = 'U';}
				print "$key.value $value\n";
			}
		}
	}
}

#Download the RSS of Queue States and convert to XML
sub fetch{
	my $uri = @_[0];
    my $mech = WWW::Mechanize->new();
    my $parser = new XML::Simple( KeepRoot => 1 );
    $mech->get($uri);
    return $parser->XMLin( $mech->content( format => 'xml' ) );
}

# vim: ft=perl : ts=4 : expandtab
